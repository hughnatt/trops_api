swagger: '2.0'
info:
  description: This is the TROPS API description
  version: 1.0.0
  title: TROPS API
  termsOfService: http://
  contact:
    email: hughnatt@protonmail.com
  license:
    name: All rights reserved
    url: https://
host: api.trops.space
basePath: /
tags:
- name: users
  description: Operations about user
- name: adverts
  description: Operations about adverts
- name: category
  description: Operations about category
- name: search
  description: Search and autocomplete operations
- name: images
  description: Operations about images
schemes:
- https
paths:
  /users:
    post:
      tags:
      - users
      summary: Register a new user
      operationId: addUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: User object to register
        required: true
        schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        201:
          description: User created
          schema:
            type: object
            properties:
              user:
                $ref: '#/definitions/User'
              token:
                type: string
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
  /users/login:
    post:
      tags:
      - users
      summary: Login a user
      operationId: loginUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string   
      responses:
        200:
          description: Login successful
          schema: 
            $ref: '#/definitions/User'
        400:
          description: Invalid Input
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'

  /users/me:
    get:
      tags:
      - users
      summary: Get user profile
      operationId: getUser
      produces:
      - application/json
      security:
        - JWT: []
      responses:
        200:
          description: Query successful
          schema:
            $ref: '#/definitions/User'
        401:
          description: Unauthorized
    delete:
      tags:
      - users
      summary: Delete current user's profile
      operationId: deleteUser
      security:
      - JWT: []
      produces:
      - application/json
      responses:
        204:
          description: User removed succesfully
        401:
          description: Unauthorized
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
      - users
      summary: Update current user's profile except password
      operationId: updateUser
      security:
      - JWT: []
      produces:
      - application/json
      responses:
        200:
          description: Updated successfully
          schema:
            $ref: '#/definitions/User'
        400:
          description: Password update rejected
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  /users/me/password:
    put:
      tags:
      - users
      summary: Update current user's password
      operationId: updateUserPassword
      consumes:
      - application/json
      produces:
      - application/json
      security:
      - JWT: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              password:
                type: string   
      responses:
        200:
          description: Password updated
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  /advert:
    get:
      tags:
      - adverts
      summary: Get all adverts from DB
      operationId: getAllAdverts
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Get sucess
          schema:
            $ref: '#/definitions/Advert'
        400:
          description: Get error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
      - adverts
      summary: Add new advert in the DB
      operationId: createNewAdvert
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in : body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Advert'
      responses:
        201:
          description: Creation succes
          schema:
            $ref: '#/definitions/Advert'
        400:
          description: Get error
          schema:
            $ref: '#/definitions/Error'
  /advert/{id}:
    delete:
      tags:
      - adverts
      summary: Delete an advert by Id
      operationId: deleteAdvertById
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: "Advert ID"
      security:
      - JWT: []
      produces:
      - application/json
      responses:
        202:
          description: Advert removed succesfully
        401:
          description: Unauthorized
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
      - adverts
      summary: Update an advert by Id
      operationId: updateAdvertById
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: "Advert ID"
      security:
      - JWT: []
      produces:
      - application/json
      responses:
        200:
          description: Advert updated succesfully
        401:
          description: Unauthorized
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  /advert/owner:
    post:
      tags:
      - adverts
      summary: get all advert from an owner
      operationId: getAdvertByOwner
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in : body
          name: body
          required: true
          schema:
            type: object
            properties:
              owner:
                type: string
      responses:
        200:
          description: Get sucess
          schema:
            $ref: '#/definitions/Advert'
        400:
          description: Get error
          schema:
            $ref: '#/definitions/Error'
  /category:
    get:
      tags:
      - category
      summary: Get all categories from DB
      operationId: getAllCategories
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Get sucess
          schema:
            $ref: '#/definitions/Category'
        400:
          description: Get error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
      - category
      summary: Add new category in the DB
      operationId: createNewCategory
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in : body
          name: body
          required: true
          schema:
            type: object
            properties:
              categoryName:
                type: string
      responses:
        201:
          description: Creation succes

        400:
          description: Get error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
      - category
      summary: Delete a category
      operationId: deleteCategoryById
      produces:
      - application/json
      responses:
        202:
          description: Advert removed succesfully
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
  /category/{id}:
    get: 
      tags:
      - category
      summary: Get category with specified id
      operationId: getCategoryById
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: "Category ID"
      produces:
      - application/json
      responses:
        200:
          description: Get sucess
          schema:
            $ref: '#/definitions/Category'
        404:
          description: No category with this id
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server error
          schema:
            $ref: "#/definitions/Error"
  /search:
    post:
      tags:
      - search
      summary: Search adverts, parameters in body
      operationId: doSearch
      consumes:
      - application/json
      produces:
      - application/json
      security:
      - JWT: []
      parameters:
        - in : body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SearchQuery'
      responses:
        200:
          description: Search sucess
          schema:
            $ref: '#/definitions/SearchResult'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  /image:
    post:
      tags:
      - images
      summary: Add new advert in the DB
      operationId: uploadNewImage
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
        - in : formData
          name: image
          required: true
          type : file
      responses:
        200:
          description: Creation succes
        400:
          description: Get error
          schema:
            $ref: '#/definitions/Error'
  /image/{filename}:
    get:
      tags:
      - images
      summary: Get a given advert from filename
      operationId: getImageFromFilename
      consumes:
      - multipart/form-data
      parameters:
        - in: path
          name: filename
          required: true
          type: string
          description: "name of the file"
      responses:
        200:
          description: Get sucess
          schema:
           type: file
        400:
          description: Get error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
      - images
      summary: Delete a given image from filename
      operationId: deleteImageFromFilename
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
        - in: path
          name: filename
          required: true
          type: string
          description: "name of the file"
      responses:
        200:
          description: Get sucess
        400:
          description: Get error
          schema:
            $ref: '#/definitions/Error'
securityDefinitions:
  JWT:
    type: apiKey
    name: Authorization
    in: header

definitions:
  User:
    type: object
    properties:
      _id: 
        type: string
      name:
        type: string
      email:
        type: string
      password:
        type: string
      tokens:
        type: array
        items:
          type: object
          properties:
            _id:
              type: string
            token:
              type: string
  Error:
    type: object
    properties:
      error:
        type: string

  SearchQuery:
    type: object
    properties:
      text: 
        type: string
      category: 
        type: string
      priceMax:
        type: integer
      priceMin:
        type: integer
  SearchResult:
    type: array
    items:
      $ref: '#/definitions/Advert'
  Advert:
    type: object
    properties:
      photos:
        type: array
        items: {}
      _id:
        type: integer
      title:
        type: string
      price:
        type: integer
      description:
        type: string
      category:
        type: string
      owner:
        type: string
      startDate:
        type: string
        format: date
      endDate:
        type: string
        format: date
      creationDate:
        type: string
        format: date
  Category:
    type: object
    properties:
      _id:
        type: integer
      name:
        type: string
      subcategories:
        $ref: '#/definitions/Category'
    example:
      _id: "5e3d2b5819bf021b7c5a1222"
      name: "Sports d'hiver"
      subcategories:
        _id: "6fehr58156g1b7c98jk5f"
        name: "Ski"